
#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include<stdlib.h>

sem_t rw_mutex;
pthread_mutex_t mutex;
int cnt = 1;
int numreader = 0;

void *writer(void *wno)
{   int now=(*((int *)wno));
    printf("\nWriter %d is trying to enter",now);    
    sem_wait(&rw_mutex);

    printf("\nWriter is writing...");
    sem_post(&rw_mutex);
    printf("\nWriter %d is leaving...",now);    
}

void *reader(void *rno)
{   
    int nor=(*((int *)rno));
    printf("\n%d Reader is trying to enter...", nor);
    pthread_mutex_lock(&mutex);
    numreader ++;
    if(numreader == 1) 
	{
        sem_wait(&rw_mutex); 
    	}
    pthread_mutex_unlock(&mutex);
    printf("\nReader is reading...");
    pthread_mutex_lock(&mutex);
    numreader --;
    if(numreader == 0) 
	{
        sem_post(&rw_mutex); // If this is the last reader, it will wake up the writer.
     }
    pthread_mutex_unlock(&mutex);
    printf("\nReader %d is leaving...", nor);
}

int main()
{   
    int n1,n2;    
    pthread_t read[10],write[10];
    printf("\nEnter the no of readers: ");
    scanf("%d",&n1);
    printf("\nEnter the no of writers: ");
    scanf("%d",&n2);
    pthread_mutex_init(&mutex, NULL);
    sem_init(&rw_mutex,0,1);
    int i;
    int pc[10] = {1,2,3,4,5,6,7,8,9,10}; 
    for(i = 0; i < n1; i++)
	 {
        pthread_create(&read[i], NULL, (void *)reader, (void *)&pc[i]);
      }
    for(i = 0; i < n2; i++) 
	 {
        pthread_create(&write[i], NULL, (void *)writer, (void *)&pc[i]);
      }

    for(i = 0; i < n1; i++) 
	 {
        pthread_join(read[i], NULL);
    	 }
    for(i = 0; i < n2; i++) 
	 {
        pthread_join(write[i], NULL);
      }

    pthread_mutex_destroy(&mutex);
    sem_destroy(&rw_mutex);
    return 0;
}



